{"version":3,"sources":["assets/tv.png","pages/Home/index.tsx","hooks/useCounter.tsx","components/Loader/index.tsx","components/StatisticsDialog/index.tsx","hooks/useSession.tsx","pages/Game/index.tsx","hooks/useShows.tsx","hooks/useGenres.tsx","pages/End/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","root","backgroundColor","minHeight","maxHeight","container","height","display","flexDirection","justifyContent","alignItems","title","textAlign","color","icon","width","List","history","useHistory","className","Container","maxWidth","src","tvIcon","alt","Button","variant","onClick","push","useCounter","initialValue","useState","counter","setCounter","increase","decrease","reset","Loader","StatisticsDialog","open","onClose","hintsUsed","wrongAnswers","correctAnswers","handleClose","Dialog","fullWidth","DialogTitle","id","DialogContent","dividers","Typography","DialogActions","autoFocus","useSession","keyName","getter","defaultValue","dataFound","sessionStorage","getItem","Number","parseInt","JSON","parse","setter","keyValue","setItem","stringify","error","console","log","cleaner","removeItem","marginTop","boxShadow","padding","boxSizing","buttons","margin","paper","letterSpacing","textfield","image","info","buttonsContainer","pageNumber","isLoading","setIsLoading","isError","setIsError","shows","setShows","useEffect","a","url","process","axios","method","data","prevShows","results","getShows","useShows","getGenresFromTV","genres","setGenres","prevGenres","getGenres","ids","filter","g","find","map","name","join","useGenres","selectedShow","setSelectedShow","userAnswer","setUserAnswer","hint","setHint","setName","setOpen","points","lifes","hints","correctAnswersCounter","wrongAnswersCounter","hintsCounter","length","parseNameToShow","toString","split","char","Math","random","getHint","first_air_date","original_language","genre_ids","overview","backdrop_path","Paper","TextField","label","onChange","e","target","value","prevSelectedShow","disabled","App","path","exact","component","Home","Game","End","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dffbafe3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tv.572d23a2.png\";","import { FunctionComponent } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport tvIcon from \"../../assets/tv.png\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from '@material-ui/core/Button';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: \"#ffffff\",\r\n    minHeight: \"100vh\",\r\n    maxHeight: \"100vh\",\r\n  },\r\n  container: {\r\n    height: '100vh',\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  title: {\r\n    textAlign: 'center',\r\n    color: '#2196f3',\r\n  },\r\n  icon: {\r\n    width: \"250px\",\r\n  },\r\n});\r\n\r\nconst List: FunctionComponent = () => {\r\n  const { container, root, title, icon } = useStyles();\r\n  let history = useHistory();\r\n\r\n  const start = () => history.push(\"/game\");\r\n\r\n  return (\r\n    <div className={root}>\r\n      <Container className={container} maxWidth={\"sm\"}>\r\n        <h1 className={title}>Guess the TV show name!</h1>\r\n        <img className={icon} src={tvIcon} alt=\"Game\" />\r\n          <Button variant=\"contained\" color=\"primary\" onClick={start}>Start</Button>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import { useState } from \"react\";\r\n\r\nexport const useCounter = (initialValue: number = 0) => {\r\n  const [counter, setCounter] = useState<number>(initialValue);\r\n\r\n  const increase = () => setCounter(() => counter + 1);\r\n  const decrease = () => setCounter(counter - 1);\r\n  const reset = () => setCounter(initialValue);\r\n\r\n  return {\r\n    counter,\r\n    increase,\r\n    decrease,\r\n    reset,\r\n  };\r\n};\r\n","import { FunctionComponent } from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst Loader: FunctionComponent = () => {\r\n  return <div className=\"lds-dual-ring\"></div>;\r\n};\r\n\r\nexport default Loader;\r\n","import { FunctionComponent } from \"react\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\ninterface StatisticsInfo {\r\n  open: boolean;\r\n  onClose: Function;\r\n  correctAnswers: number;\r\n  wrongAnswers: number;\r\n  hintsUsed: number;\r\n}\r\n\r\nconst StatisticsDialog: FunctionComponent<StatisticsInfo> = ({\r\n  open,\r\n  onClose,\r\n  hintsUsed,\r\n  wrongAnswers,\r\n  correctAnswers,\r\n}: StatisticsInfo) => {\r\n  const handleClose = () => {\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      onClose={handleClose}\r\n      aria-labelledby=\"simple-dialog-title\"\r\n      open={open}\r\n      maxWidth=\"sm\"\r\n      fullWidth\r\n    >\r\n      <DialogTitle id=\"simple-dialog-title\">Statistics</DialogTitle>\r\n      <DialogContent dividers>\r\n        <Typography>Correct guesses: {correctAnswers}</Typography>\r\n        <Typography>Wrong guesses: {wrongAnswers}</Typography>\r\n        <Typography>Hints used: {hintsUsed}</Typography>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button autoFocus onClick={handleClose} color=\"primary\">\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default StatisticsDialog;\r\n","export interface Session {\r\n  keyName: string;\r\n  defaultValue: number;\r\n}\r\nexport const useSession = ({ keyName, defaultValue }: Session) => {\r\n  let getter: number = defaultValue;\r\n\r\n  const dataFound = sessionStorage.getItem(keyName);\r\n  if (dataFound) {\r\n    getter = Number.parseInt(JSON.parse(dataFound));\r\n  }\r\n\r\n  const setter = (keyValue: string) => {\r\n    try {\r\n      sessionStorage.setItem(keyName, JSON.stringify(keyValue));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    getter = Number.parseInt(keyValue);\r\n  };\r\n\r\n  const cleaner = () => {\r\n    sessionStorage.removeItem(keyName);\r\n  };\r\n\r\n  return { getter, setter, cleaner };\r\n};\r\n","import {\r\n  FunctionComponent,\r\n  useEffect,\r\n  useState,\r\n  ChangeEventHandler,\r\n  MouseEventHandler,\r\n} from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport useShows from \"../../hooks/useShows\";\r\nimport { useCounter } from \"../../hooks/useCounter\";\r\nimport useGenres from \"../../hooks/useGenres\";\r\nimport Loader from \"../../components/Loader\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport StatisticsDialog from \"../../components/StatisticsDialog\";\r\nimport { useSession } from \"../../hooks/useSession\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: \"#ffffff\",\r\n    minHeight: \"100vh\",\r\n    maxHeight: \"100vh\",\r\n    marginTop: \"0px\",\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    backgroundColor: \"#2196f3\",\r\n    color: \"#ffffff\",\r\n    boxShadow: \"rgba(0, 0, 0, 0.24) 0px 3px 8px\",\r\n    width: \"100%\",\r\n    padding: \"25px\",\r\n    marginTop: \"0px\",\r\n    boxSizing: \"border-box\",\r\n  },\r\n  buttons: {\r\n    margin: \"5px\",\r\n  },\r\n  paper: {\r\n    margin: \"5px\",\r\n    padding: \"10px\",\r\n    width: \"50%\",\r\n    boxSizing: \"border-box\",\r\n    letterSpacing: \"3px\",\r\n  },\r\n  textfield: {\r\n    width: \"50%\",\r\n  },\r\n  image: {\r\n    width: \"200px\",\r\n  },\r\n  info: {\r\n    width: \"80%\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-around\",\r\n  },\r\n  buttonsContainer: {\r\n    margin: \"25px\",\r\n  },\r\n});\r\n\r\nconst List: FunctionComponent = () => {\r\n  let history = useHistory();\r\n  const {\r\n    container,\r\n    root,\r\n    title,\r\n    buttons,\r\n    paper,\r\n    textfield,\r\n    image,\r\n    info,\r\n    buttonsContainer,\r\n  } = useStyles();\r\n  //change to page\r\n  const { isLoading, isError, shows } = useShows(1);\r\n  const { getGenresFromTV } = useGenres();\r\n  const [selectedShow, setSelectedShow] = useState<number>(1);\r\n  const [userAnswer, setUserAnswer] = useState<string>(\"\");\r\n  const [hint, setHint] = useState(<div></div>);\r\n  const [name, setName] = useState<Array<string>>([]);\r\n  const [open, setOpen] = useState<boolean>(false);\r\n\r\n  const correctAnswers = useSession({\r\n    keyName: \"correctAnswers\",\r\n    defaultValue: 0,\r\n  });\r\n  const wrongAnswers = useSession({ keyName: \"wrongAnswers\", defaultValue: 0 });\r\n  const hintsUsed = useSession({ keyName: \"hintsUsed\", defaultValue: 0 });\r\n\r\n  const points = useCounter(0);\r\n  const lifes = useCounter(3);\r\n  const hints = useCounter(1);\r\n\r\n  //save in a provider or something with session\r\n  const correctAnswersCounter = useCounter(correctAnswers.getter);\r\n  const wrongAnswersCounter = useCounter(wrongAnswers.getter);\r\n  const hintsCounter = useCounter(hintsUsed.getter);\r\n\r\n  useEffect(() => {\r\n    if (shows.length > 0) {\r\n      setName(parseNameToShow(shows[selectedShow].name));\r\n    }\r\n  }, [shows]);\r\n\r\n  useEffect(() => {\r\n    correctAnswers.setter(correctAnswersCounter.counter.toString());\r\n    wrongAnswers.setter(wrongAnswersCounter.counter.toString());\r\n    hintsUsed.setter(hintsCounter.counter.toString());\r\n  }, [\r\n    hints.counter,\r\n    correctAnswersCounter.counter,\r\n    wrongAnswersCounter.counter,\r\n  ]);\r\n\r\n  const endGame = () => history.push(\"/end\");\r\n\r\n  const imgUrl = `https://image.tmdb.org/t/p/original`;\r\n\r\n  const getRandomBoolean = () => {\r\n    return Math.random() < 0.5;\r\n  };\r\n\r\n  const parseNameToShow = (name: string) => {\r\n    const nameParsed = name.split(\"\").map((char) => {\r\n      if (char == \" \") return \" \";\r\n      if (getRandomBoolean() === true) {\r\n        return char;\r\n      } else {\r\n        return \"_\";\r\n      }\r\n    });\r\n    return nameParsed;\r\n  };\r\n\r\n  const handleInputChange: ChangeEventHandler<HTMLInputElement> = (e) => {\r\n    setUserAnswer(e.target.value);\r\n  };\r\n\r\n  const checkTheGuess: MouseEventHandler<HTMLElement> = () => {\r\n    if (userAnswer === \"\") return;\r\n    const { name } = shows[selectedShow];\r\n    if (userAnswer === name) {\r\n      setSelectedShow((prevSelectedShow) => prevSelectedShow + 1);\r\n      setUserAnswer(\"\");\r\n      points.increase();\r\n      correctAnswersCounter.increase();\r\n      hints.reset();\r\n      setName(parseNameToShow(shows[selectedShow + 1].name));\r\n      setHint(<div></div>);\r\n    } else {\r\n      lifes.decrease();\r\n      wrongAnswersCounter.increase();\r\n      if (lifes.counter === 1) {\r\n        endGame();\r\n      }\r\n    }\r\n  };\r\n\r\n  const showHint = () => {\r\n    setHint(getHint());\r\n    hints.increase();\r\n    hintsCounter.increase();\r\n  };\r\n\r\n  const getHint = () => {\r\n    switch (hints.counter) {\r\n      case 1:\r\n        return <div>First air date: {shows[selectedShow].first_air_date}</div>;\r\n      case 2:\r\n        return (\r\n          <div>Original language: {shows[selectedShow].original_language}</div>\r\n        );\r\n      case 3:\r\n        return (\r\n          <div>Genres: {getGenresFromTV(shows[selectedShow].genre_ids)}</div>\r\n        );\r\n      case 4:\r\n        return <div>Overview: {shows[selectedShow].overview}</div>;\r\n      case 5:\r\n        return (\r\n          <img\r\n            className={image}\r\n            src={`${imgUrl}${shows[selectedShow].backdrop_path}`}\r\n            alt=\"TV show\"\r\n          />\r\n        );\r\n      default:\r\n        return <div>No more hints</div>;\r\n    }\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={root}>\r\n      <h1 className={title}>¡Guess the TV show name!</h1>\r\n      <Container className={container} maxWidth={\"sm\"}>\r\n        {isLoading && <Loader />}\r\n        {isError && <div>Error</div>}\r\n        {!isLoading && shows.length > 0 && (\r\n          <>\r\n            <div className={info}>\r\n              <h4>Points: {points.counter}</h4>\r\n              <h4>Lifes: {lifes.counter}</h4>\r\n            </div>\r\n            <Paper className={paper} variant=\"outlined\">\r\n              <h2>{name}</h2>\r\n            </Paper>\r\n            <TextField\r\n              className={textfield}\r\n              id=\"outlined-basic\"\r\n              label=\"Answer\"\r\n              onChange={handleInputChange}\r\n              value={userAnswer}\r\n            />\r\n            <div className={buttonsContainer}>\r\n              <Button\r\n                className={buttons}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={checkTheGuess}\r\n                disabled={userAnswer.length === 0}\r\n              >\r\n                Check the guess\r\n              </Button>\r\n              <Button\r\n                className={buttons}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={showHint}\r\n                disabled={hints.counter > 5}\r\n              >\r\n                Hint\r\n              </Button>\r\n            </div>\r\n            <Button\r\n              className={buttons}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={handleClickOpen}\r\n            >\r\n              Statistics\r\n            </Button>\r\n            <div className=\"hint\">{hint}</div>\r\n            <StatisticsDialog\r\n              open={open}\r\n              onClose={handleClose}\r\n              correctAnswers={correctAnswers.getter}\r\n              wrongAnswers={wrongAnswers.getter}\r\n              hintsUsed={hintsUsed.getter}\r\n            />\r\n          </>\r\n        )}\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Show } from \"../interfaces\";\r\nexport default function useMovies(pageNumber: number) {\r\n  const [isLoading, setIsLoading] = useState<boolean>(true);\r\n  const [isError, setIsError] = useState<boolean>(false);\r\n  const [shows, setShows] = useState<Array<Show>>([]);\r\n\r\n  useEffect(() => {\r\n    const getShows = async () => {\r\n      const url: string = `https://api.themoviedb.org/3/tv/top_rated?api_key=${process.env.REACT_APP_APIKEY}&language=en-US&page=1`;\r\n      setIsLoading(true);\r\n      setIsError(false);\r\n      try {\r\n        const { data } = await axios({\r\n          url,\r\n          method: \"GET\",\r\n        });\r\n        setShows((prevShows) => {\r\n          return [...prevShows, ...data.results];\r\n        });\r\n        setIsLoading(false);\r\n      } catch (err) {\r\n        setIsLoading(false);\r\n        setIsError(true);\r\n      }\r\n    };\r\n    getShows();\r\n  }, [pageNumber]);\r\n\r\n  return {\r\n    isLoading,\r\n    isError,\r\n    shows,\r\n  };\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Genre } from \"../interfaces\";\r\n\r\nexport default function useGenres() {\r\n  const [genres, setGenres] = useState<Array<Genre>>([]);\r\n  const [isError, setIsError] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    const getGenres = async () => {\r\n      const url: string = `https://api.themoviedb.org/3/genre/tv/list?api_key=${process.env.REACT_APP_APIKEY}&language=en-US`;\r\n      try {\r\n        const { data } = await axios({\r\n          url,\r\n          method: \"GET\",\r\n        });\r\n        setGenres((prevGenres) => {\r\n          return [...prevGenres, ...data.genres];\r\n        });\r\n      } catch (err) {\r\n        setIsError(true);\r\n      }\r\n    };\r\n    getGenres();\r\n  }, []);\r\n\r\n  const getGenresFromTV = (ids: Array<number>) => {\r\n    const result = genres\r\n      .filter((g: Genre) => ids.find((id) => id === g.id))\r\n      .map((g) => {\r\n        return g.name;\r\n      });\r\n    return result.join(\", \");\r\n  };\r\n\r\n  return {\r\n    isError,\r\n    genres,\r\n    getGenresFromTV,\r\n  };\r\n}\r\n","import { FunctionComponent } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport tvIcon from \"../../assets/tv.png\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    backgroundColor: \"#ffffff\",\r\n    minHeight: \"100vh\",\r\n    maxHeight: \"100vh\",\r\n  },\r\n  container: {\r\n    height: \"100vh\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    color: \"#2196f3\",\r\n  },\r\n});\r\n\r\nconst List: FunctionComponent = () => {\r\n  const { container, root, title } = useStyles();\r\n  let history = useHistory();\r\n\r\n  const restart = () => history.push(\"/game\");\r\n\r\n  return (\r\n    <div className={root}>\r\n      <Container className={container} maxWidth={\"sm\"}>\r\n        <h1 className={title}>You lost, ¿Do you want to start again?</h1>\r\n        <Button variant=\"contained\" color=\"primary\" onClick={restart}>\r\n          Start\r\n        </Button>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import { FunctionComponent } from \"react\";\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"../src/pages/Home\";\nimport Game from \"../src/pages/Game\";\nimport End from \"../src/pages/End\";\nconst App: FunctionComponent = () => {\n  return (\n    <Router>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/game\" exact component={Game} />\n      <Route path=\"/end\" exact component={End} />\n      <Redirect to=\"/\" />\n    </Router>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}